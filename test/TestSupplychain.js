// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require("SupplyChain");

contract("SupplyChain", function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  let sku = 1;
  let upc = 1;
  let ownerID = accounts[0];
  const originFarmerID = accounts[1];
  const originFarmName = "John Doe";
  const originFarmInformation = "Yarray Valley";
  const originFarmLatitude = "-38.239770";
  const originFarmLongitude = "144.341490";
  let productID = sku + upc;
  const productNotes = "Best beans for Espresso";
  const productPrice = web3.utils.toWei("1", "ether");
  let itemState = 0;
  const distributorID = accounts[2];
  const retailerID = accounts[3];
  const consumerID = accounts[4];
  const emptyAddress = "0x00000000000000000000000000000000000000";
  let resultBufferOne;
  let resultBufferTwo;
  let event;
  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log("ganache-cli accounts used here...");
  console.log("Contract Owner: accounts[0] ", accounts[0]);
  console.log("Farmer: accounts[1] ", accounts[1]);
  console.log("Distributor: accounts[2] ", accounts[2]);
  console.log("Retailer: accounts[3] ", accounts[3]);
  console.log("Consumer: accounts[4] ", accounts[4]);

  const verifyBufferOne = (resultBufferOne) => {
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(
      resultBufferOne[2],
      ownerID,
      "Error: Missing or Invalid ownerID"
    );
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
  };
  const verifyBufferTwo = (resultBufferTwo) => {
    assert.equal(resultBufferTwo[0], sku, "Error: Invalid item sku");
    assert.equal(resultBufferTwo[1], upc, "Error: Invalid item UPC");
    assert.equal(
      resultBufferTwo[2],
      productID,
      "Error: Missing or Invalid Product Id"
    );
    assert.equal(
      resultBufferTwo[3],
      productNotes,
      "Error: Missing or Invalid product notes"
    );
    assert.equal(
      resultBufferTwo[4],
      productPrice,
      "Error: Missing or Invalid product price"
    );
    assert.equal(
      resultBufferTwo[5],
      itemState,
      "Error: Missing or Invalid Item state"
    );
    assert.equal(
      resultBufferTwo[6],
      distributorID,
      "Error: Missing or Invalid distributor Id"
    );
    assert.equal(
      resultBufferTwo[7],
      retailerID,
      "Error: Missing or Invalid Retailer Id"
    );
    assert.equal(
      resultBufferTwo[8],
      consumerID,
      "Error: Missing or Invalid Consumer ID"
    );
  };
  const verifyResult = (params) => {
    verifyBufferOne(params.resultBufferOne);
    itemState = params.state;
    assert.equal(
      params.resultBufferTwo[5],
      itemState,
      "Error: Invalid item State"
    );
    assert.equal(params.event.length > 0, true, "Invalid event emitted");
  };

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Watch the emitted event Harvested()
    // Mark an item as Harvested by calling function harvestItem()
    await supplyChain.addFarmer(originFarmerID);
    await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes,
      { from: originFarmerID }
    );
    event = await supplyChain.getPastEvents("Harvested", { filter: { upc } });
    ownerID = originFarmerID;
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
    // Verify the result set
    verifyResult({ resultBufferOne, resultBufferTwo, event, state: 0 });
    assert.equal(
      await supplyChain.isFarmer(originFarmerID),
      true,
      "This is not a Farmer account"
    );
  });

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, { from: originFarmerID });
    event = await supplyChain.getPastEvents("Processed", { filter: upc });
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
    resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);
    // Verify the result set
    verifyResult({ resultBufferOne, resultBufferTwo, event, state: 1 });
  });

  // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    // Declare and Initialize a variable for event
    // Watch the emitted event Packed()
    // Mark an item as Packed by calling function packItem()
    await supplyChain.packItem(upc, { from: originFarmerID });
    let event = await supplyChain.getPastEvents("Packed", { filter: upc });
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
    resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);
    // Verify the result set
    verifyResult({ resultBufferOne, resultBufferTwo, event, state: 2 });
  });

  // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    // Watch the emitted event ForSale()
    // Mark an item as ForSale by calling function sellItem()
    await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });
    event = await supplyChain.getPastEvents("ForSale", { filter: upc });
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
    resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);
    // Verify the result set
    verifyResult({ resultBufferOne, resultBufferTwo, event, state: 3 });
  });

  // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    await supplyChain.addDistributor(distributorID);
    // Declare and Initialize a variable for event
    // Watch the emitted event Sold()
    // Mark an item as Sold by calling function buyItem()
    await supplyChain.buyItem(upc, {
      from: distributorID,
      value: productPrice,
    });
    event = await supplyChain.getPastEvents("Sold", { filter: upc });
    ownerID = distributorID;
    resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
    resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set
    verifyResult({ resultBufferOne, resultBufferTwo, event, state: 4 });
    assert.equal(
      await supplyChain.isDistributor(distributorID),
      true,
      "This is not a distributor account"
    );
    assert.equal(resultBufferTwo[5], 4, true, "Item state does not change");
    assert.equal(
      resultBufferTwo[6],
      distributorID,
      true,
      "Distributor is not added"
    );
  });
  // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    // Watch the emitted event Shipped()
    // Mark an item as Sold by calling function buyItem()
    await supplyChain.shipItem(upc, { from: distributorID });
    event = await supplyChain.getPastEvents("Shipped", { filter: upc });
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
    resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);
    // Verify the result set
    verifyResult({ resultBufferOne, resultBufferTwo, event, state: 5 });
  });

  // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
    const supplyChain = await SupplyChain.deployed();
    await supplyChain.addRetailer(retailerID);
    // Declare and Initialize a variable for event
    // Watch the emitted event Received()
    // Mark an item as Sold by calling function buyItem()
    await supplyChain.receiveItem(upc, { from: retailerID });
    event = await supplyChain.getPastEvents("Received", { filter: upc });
    ownerID = retailerID;
    resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
    resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set
    verifyResult({ resultBufferOne, resultBufferTwo, event, state: 6 });
    assert.equal(
      await supplyChain.isRetailer(retailerID),
      true,
      "This is not a retailer account"
    );
    assert.equal(
      resultBufferTwo[7],
      retailerID,
      true,
      "Retailer does not change"
    );
  });

  // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    await supplyChain.addConsumer(consumerID);
    // Declare and Initialize a variable for event
    // Watch the emitted event Purchased()
    // Mark an item as Sold by calling function buyItem()
    await supplyChain.purchaseItem(upc, { from: consumerID });
    event = await supplyChain.getPastEvents("Purchased", { filter: upc });
    ownerID = consumerID;
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
    resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);
    // Verify the result set
    verifyResult({ resultBufferOne, resultBufferTwo, event, state: 7 });
    assert.equal(
      await supplyChain.isPurchased(upc),
      true,
      "This Item is not purchased yet"
    );
    assert.equal(
      await supplyChain.isConsumer(consumerID),
      true,
      "This is not a consumer account"
    );
  });

  // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set:
    verifyBufferOne(await supplyChain.fetchItemBufferOne(upc));
  });

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set:
    verifyBufferTwo(await supplyChain.fetchItemBufferTwo(upc));
  });

  describe("Renounce of all the roles", () => {
    // 11th Test
    it("Should renounce the consumer", async () => {
      const supplyChain = await SupplyChain.deployed();
      await supplyChain.renounceConsumer({ from: consumerID });
      assert.equal(
        await supplyChain.isConsumer(consumerID),
        false,
        "Failed to renounce consumer"
      );
    });

    // 12th Test
    it("Should renounce the Retailer", async () => {
      const supplyChain = await SupplyChain.deployed();
      await supplyChain.renounceRetailer({ from: retailerID });
      assert.equal(
        await supplyChain.isRetailer(retailerID),
        false,
        "Failed to renounce Retailer"
      );
    });

    // 13th Test
    it("Should renounce the Distributor", async () => {
      const supplyChain = await SupplyChain.deployed();
      await supplyChain.renounceDistributor({ from: distributorID });
      assert.equal(
        await supplyChain.isDistributor(distributorID),
        false,
        "Failed to renounce Distributor"
      );
    });

    // 14th Test
    it("Should renounce the Farmer", async () => {
      const supplyChain = await SupplyChain.deployed();
      await supplyChain.renounceFarmer({ from: originFarmerID });
      assert.equal(
        await supplyChain.isFarmer(originFarmerID),
        false,
        "Failed to renounce Farmer"
      );
    });
    // 15th Test
    it("Should destroy the contract ", async () => {
      const supplyChain = await SupplyChain.deployed();
      await supplyChain.selfDestruct();
      // Verify if the contract has got destroyed:
      assert.equal(
        await web3.eth.getCode(supplyChain.address),
        "0x",
        "Error: ByteCode"
      );
    });
  });
});
